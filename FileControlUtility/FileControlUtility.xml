<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FileControlUtility</name>
    </assembly>
    <members>
        <member name="F:FileControlUtility.TransferErrorAction.SKIP">
            <summary>
            Ignore the action in which the error occured and proceed to the next action.
            </summary>
        </member>
        <member name="F:FileControlUtility.TransferErrorAction.CANCEL">
            <summary>
            Cancel execution for the whole transfer for all settings.
            </summary>
        </member>
        <member name="F:FileControlUtility.TransferErrorAction.RETRY">
            <summary>
            Retry the action in which the error occured.
            </summary>
        </member>
        <member name="P:FileControlUtility.TransferErrorArgs.TransferErrorOrigin">
            <summary>
            The type of action which caused the error.
            </summary>
        </member>
        <member name="P:FileControlUtility.TransferErrorArgs.OriginFile">
            <summary>
            Available only when TransferErrorOrigin is TransferingFile. Null for the other types.
            </summary>
        </member>
        <member name="P:FileControlUtility.TransferErrorArgs.DestinyDirectory">
            <summary>
            Available only when TransferErrorOrigin is TransferingFile. Null for the other types.
            </summary>
        </member>
        <member name="P:FileControlUtility.TransferErrorArgs.TransferSettings">
            <summary>
            The TransferSettings object for the current transfer.
            </summary>
        </member>
        <member name="P:FileControlUtility.TransferErrorArgs.TransferErrorAction">
            <summary>
            Describes what to do with the action which caused the error.<para>Default: <c>TransferErrorAction.SKIP</c></para>
            </summary>
        </member>
        <member name="P:FileControlUtility.FileExecutingArgs.TrimmedPathWithFileName">
            <summary>
            File name containing part of the path that is common between source and destiny files paths informed 
            in the <c>TransferSettings</c> object of the transfer.
            </summary>
        </member>
        <member name="T:FileControlUtility.FileControl">
            <summary>
            Main class. To run transfers <c>ManageFiles</c> should be invoked.<para>Most exceptions/errors (non fatal) are managed by the ErrorOccured event, which can 
            manage the actions to be taken after an error occurs (retry, skip and cancel), and contains valuable information. Exceptions that the program 
            can't handle are thrown.</para><para>If no handler for the <c>ErrorOccured</c> event is set by the client, the default behavior for each action 
            which causes an error is to skip.</para>
            </summary>
        </member>
        <member name="M:FileControlUtility.FileControl.HandleRepeatableTask(FileControlUtility.FileControl.RepeatableTask)">
            <summary>
            Handles the loop for a repeatable task. Task will repeat while <c>retryTask</c> parameter from the <c>RepeatableTask</c> delegate is true.
            </summary>
        </member>
        <member name="E:FileControlUtility.FileControl.ErrorOccured">
            <summary>
            Happens when an non fatal error occurs during the transfer. The <c>TransferErrorAction</c> property of <c>TransferErrorArgs</c> 
            can be set, indicating whether the task in which the error occured must be retried (RETRY), skipped (SKIP) or the 
            whole transfer must be canceled (CANCEL).
            </summary>
            <remarks>Default error action: <c>TransferErrorAction.SKIP</c></remarks>
        </member>
        <member name="E:FileControlUtility.FileControl.LogMessageGenerated">
            <summary>
            Happens when a log message is generated.
            </summary>
        </member>
        <member name="E:FileControlUtility.FileControl.FileExecuting">
            <summary>
            Happens before the execution of each file.
            </summary>
        </member>
        <member name="M:FileControlUtility.FileControl.DefaultHandlers.LogMessageGenerated(System.String)">
            <summary>
            Built in handler for the LogMessageCreated event. Outputs the log message to the console with a timestamp.
            </summary>
        </member>
        <member name="M:FileControlUtility.FileControl.DefaultHandlers.FileExecuting(System.Object,FileControlUtility.FileExecutingArgs)">
            <summary>
            Built in handler for the FileExecuting event. Outputs the current file being executed to the console with a timestamp.
            </summary>
        </member>
        <member name="M:FileControlUtility.FileControl.ManageFiles(System.Collections.Generic.List{FileControlUtility.TransferSettings})">
            <summary>
            Main method. Runs the transfer for the specified settings.<para>Information about the last transfer from the instance will be available in
            the following properties:</para>
            <code>TransferedFilesReports
            NotTransferedFilesReports
            RenamedFilesReports
            CreatedDirReports
            ReplacedFilesReports
            RemovedFilesAndDirReports
            </code>
            </summary>
        </member>
        <member name="M:FileControlUtility.FileControl.FilesTotal(System.Collections.Generic.List{FileControlUtility.TransferSettings})">
            <summary>
            Retrieves the number of files that would be subject to a transfer given a list of settings.<para>Can be used as data for a progress bar, for example.</para>
            </summary>
        </member>
        <member name="M:FileControlUtility.FileControl.AdjustPath(System.String)">
            <summary>
            Returns an adjusted full or relative path string. Relative paths start with a directory separator.
            </summary>
        </member>
        <member name="M:FileControlUtility.FileControl.OrganizeEnumeratedFiles(System.String,System.Int32)">
            <summary>
            Update the numbers from all filenames enumerated with the pattern &lt;name&gt; (&lt;number&gt;)&lt;extension&gt;,
            originated from the given file, in it's own directory.<para>The maximum quantity of enumerated files (including the original) can be informed in <c>maxKeptFileCount</c>, 
            meaning the enumerated files, selected from highest number in descending way, will be kept and re-enumerated and the excess will be deleted. A value of 0 for 
            <c>maxKeptFileCount</c> means all files will be kept.</para>
            </summary>
        </member>
        <member name="M:FileControlUtility.FileControl.OrganizeEnumeratedFiles(System.IO.FileInfo,System.Int32)">
            <summary>
            Update the numbers from all filenames enumerated with the pattern &lt;name&gt; (&lt;number&gt;)&lt;extension&gt;,
            originated from the given file, in it's own directory.<para>The maximum quantity of enumerated files (including the original) can be informed in <c>maxKeptFileCount</c>, 
            meaning the enumerated files, selected from highest number in descending way, will be kept and re-enumerated and the excess will be deleted. A value of 0 for 
            <c>maxKeptFileCount</c> means all files will be kept.</para>
            </summary>
        </member>
        <member name="P:FileControlUtility.TransferSettings.IncludeSubFolders">
            <summary>
            Whether to include subfolders and their content, otherwise only the top directory.
            </summary>
            <remarks>Default: <c>false</c></remarks>
        </member>
        <member name="P:FileControlUtility.TransferSettings.KeepOriginFiles">
            <summary>
            Whether to copy origin files, otherwise move.
            </summary>
            <remarks>Default: <c>true</c></remarks>
        </member>
        <member name="P:FileControlUtility.TransferSettings.CleanDestinyDirectory">
            <summary>
            Delete all files from destiny directory before transfering.
            </summary>
            <remarks>Default: <c>false</c></remarks>
        </member>
        <member name="P:FileControlUtility.TransferSettings.FileNameConflictMethod">
            <summary>
            What to do with filename conflicts.
            <list type="table"><item><term><c>FileNameConflictMethod.DO_NOT_MOVE</c></term><description>files will be skipped.</description></item>
            <item><term><c>FileNameConflictMethod.REPLACE_ALL</c></term><description>replace all files.</description></item>
            <item><term><c>FileNameConflictMethod.REPLACE_DIFFERENT</c></term><description>perfom a binary comparison, then replace, if they're not equal.</description></item>
            <item><term><c>FileNameConflictMethod.RENAME_DIFFERENT</c></term><description>perfom a binary comparison, then copy the file giving it an enumerated name, 
            if they're not equal.</description></item>
            </list>
            </summary>
            <remarks>Default: <c>FileNameConflictMethod.DO_NOT_MOVE</c></remarks>
        </member>
        <member name="P:FileControlUtility.TransferSettings.FilteredFileNamesOrExtensionsMode">
            <summary>
            What to do with the specified files or extensions inside FilteredFileNamesAndExtensions list.
            <list type="table"><item><term><c>FilterMode.TRANSFER_ONLY</c></term><description>only specified items will be transfered.</description></item>
            <item><term><c>FilterMode.IGNORE</c></term><description>all specified items will be ignored.</description></item></list>
            </summary>
            <remarks>Default: <c>FilterMode.TRANSFER_ONLY</c></remarks>
        </member>
        <member name="P:FileControlUtility.TransferSettings.FilteredFileNamesAndExtensions">
            <summary>
            List of files or extensions to be selected or excluded from the transfer based on <c>FilteredFileNamesOrExtensionsMode</c>. The list can be empty, meaning 
            no file will be excluded.<para>Filenames can be used normally or with full path. Extensions are required to start with ".". Server paths are accepted (starting 
            with double directory separator).</para>
            </summary>
        </member>
        <member name="P:FileControlUtility.TransferSettings.FilteredDirectoriesMode">
            <summary>
            What to do with the specified directories inside SpecifiedDirectories list.
            <list type="table"><item><term><c>FilterMode.TRANSFER_ONLY</c></term><description>only specified items will be transfered.</description></item>
            <item><term><c>FilterMode.IGNORE</c></term><description>all specified items will be ignored.</description></item></list>
            </summary>
            <remarks>Default: <c>FilterMode.TRANSFER_ONLY</c></remarks>
        </member>
        <member name="P:FileControlUtility.TransferSettings.FilteredDirectories">
            <summary>
            List of directories to be selected or excluded from the transfer based on <c>FilteredDirectoriesMode</c>. The list can be empty, meaning 
            no directory will be excluded.<para>Full and relative paths can be used. Relative paths strings are required to start with a directory 
            separator. Server paths are accepted (starting with double directory separator).</para>
            </summary>
        </member>
        <member name="P:FileControlUtility.TransferSettings.DeleteUncommonFiles">
            <summary>
            <para>Whether to delete files present in the destiny directory that weren't present in source directory.</para>
            <para>Note: no effect while using <c>RENAME_DIFFERENT</c> conflict method type.</para>
            </summary>
            <remarks>Default: <c>false</c></remarks>
        </member>
        <member name="P:FileControlUtility.TransferSettings.ReenumerateRenamedFiles">
            <summary>
            Update the numbers from filenames in the destiny directory enumerated with the pattern &lt;name&gt; (&lt;number&gt;)&lt;extension&gt;, 
            for each file from which they have originated. The maximum quantity of enumerated files (including the original) can be informed in <c>MaxKeptRenamedFileCount</c>, 
            meaning the enumerated files, selected from highest number in descending way, will be kept and re-enumerated and the excess will
            be deleted. <para>Note: has effect only while using <c>RENAME_DIFFERENT</c> conflict 
            method type.</para><para>Note: applies only to files subject to the transfer, not all files in the destiny directory. To enumerate all files use 
            the <c>OrganizeEnumeratedFiles</c> method.</para>
            </summary>
            <remarks>Default: <c>false</c></remarks>
        </member>
        <member name="P:FileControlUtility.TransferSettings.MaxKeptRenamedFileCount">
            <summary>
            The maximum quantity of enumerated files in the destiny directory (including the original) to be kept and re-enumerated, 
            for each file from which they have originated. Files with the highest enumeration will be selected   
            and the excess will be deleted.<para>Note: 0 means all files will be kept.</para><para>Note: has effect only while using <c>RENAME_DIFFERENT</c> conflict 
            method type and <c>ReenumerateRenamedFiles</c> = true.</para>
            </summary>
            <remarks>Default: <c>0</c></remarks>
        </member>
        <member name="M:FileControlUtility.Utility.AdjustFullPath(System.String)">
            <summary>
            Adjusts full paths.
            </summary>
        </member>
        <member name="M:FileControlUtility.Utility.AdjustPath(System.String)">
            <summary>
            Adjusts full and relative paths.
            </summary>
        </member>
        <member name="M:FileControlUtility.Utility.PathContainsDirectory(System.String,System.String)">
            <summary>
            Directories must start with directory separator
            </summary>
        </member>
    </members>
</doc>
